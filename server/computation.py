# -*- coding: utf-8 -*-
"""python_ml_final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TDPL0LrmI8FZaxd3l_AyOijImFbJvZVb
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import json

import cv2

def color_weight_pred(filename):
  model = tf.keras.models.load_model('colormodel_trained_89.h5')
  model.summary()
  img = cv2.imread(filename)
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  h, w, c = img.shape
  hs = round(h/24)
  ws = round(w/16)
  resized = cv2.resize(img, (ws,hs), interpolation = cv2.INTER_AREA)
  new_resized = cv2.resize(resized, (ws*16,hs*24), interpolation = cv2.INTER_AREA)
  cv2.imshow('new image', new_resized)
  a = []
  for i in range(hs):
    for j in range(ws):
      a.append(new_resized[i,j])
  new_resized_df = pd.DataFrame(a, columns=['red', 'green', 'blue'])
  color = model.predict(new_resized_df)
  bin_col = np.argmax(color, axis=1)
  weights = []
  for i in range(len(bin_col)):
    if bin_col[i]==1:
      g_percent = new_resized_df.loc[i, 'green']/(int(new_resized_df.loc[i, 'green']) + new_resized_df.loc[i, 'blue'] + new_resized_df.loc[i, 'red'])
      g_percent = g_percent * 100
      weights.append(g_percent-30)
    elif bin_col[i]==7:
      g_percent = 55
      weights.append(g_percent)
    elif bin_col[i]==2:
      g_percent = 100
      weights.append(g_percent)
    else:
      g_percent = 80
      weights.append(g_percent)
  print(weights)
  #x = np.reshape(weights, (hs, ws))
  y = json.dumps(weights)

  cv2.waitKey(0)
  cv2.destroyAllWindows()

  return y